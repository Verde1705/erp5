<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts21897132.45</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>verilog.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.defineMode("verilog", function(config, parserConfig) {\n
\n
  var indentUnit = config.indentUnit,\n
      statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n
      dontAlignCalls = parserConfig.dontAlignCalls,\n
      noIndentKeywords = parserConfig.noIndentKeywords || [],\n
      multiLineStrings = parserConfig.multiLineStrings;\n
\n
  function words(str) {\n
    var obj = {}, words = str.split(" ");\n
    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n
    return obj;\n
  }\n
\n
  /**\n
   * Keywords from IEEE 1800-2012\n
   */\n
  var keywords = words(\n
    "accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind " +\n
    "bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config " +\n
    "const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable " +\n
    "dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup " +\n
    "endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask " +\n
    "enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin " +\n
    "function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import " +\n
    "incdir include initial inout input inside instance int integer interconnect interface intersect join join_any " +\n
    "join_none large let liblist library local localparam logic longint macromodule matches medium modport module " +\n
    "nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed " +\n
    "parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup " +\n
    "pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg " +\n
    "reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime " +\n
    "s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify " +\n
    "specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on " +\n
    "table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior " +\n
    "trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void " +\n
    "wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor");\n
\n
  /** Operators from IEEE 1800-2012\n
     unary_operator ::=\n
       + | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n
     binary_operator ::=\n
       + | - | * | / | % | == | != | === | !== | ==? | !=? | && | || | **\n
       | < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | << | >>> | <<<\n
       | -> | <->\n
     inc_or_dec_operator ::= ++ | --\n
     unary_module_path_operator ::=\n
       ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n
     binary_module_path_operator ::=\n
       == | != | && | || | & | | | ^ | ^~ | ~^\n
  */\n
  var isOperatorChar = /[\\+\\-\\*\\/!~&|^%=?:]/;\n
  var isBracketChar = /[\\[\\]{}()]/;\n
\n
  var unsignedNumber = /\\d[0-9_]*/;\n
  var decimalLiteral = /\\d*\\s*\'s?d\\s*\\d[0-9_]*/i;\n
  var binaryLiteral = /\\d*\\s*\'s?b\\s*[xz01][xz01_]*/i;\n
  var octLiteral = /\\d*\\s*\'s?o\\s*[xz0-7][xz0-7_]*/i;\n
  var hexLiteral = /\\d*\\s*\'s?h\\s*[0-9a-fxz?][0-9a-fxz?_]*/i;\n
  var realLiteral = /(\\d[\\d_]*(\\.\\d[\\d_]*)?E-?[\\d_]+)|(\\d[\\d_]*\\.\\d[\\d_]*)/i;\n
\n
  var closingBracketOrWord = /^((\\w+)|[)}\\]])/;\n
  var closingBracket = /[)}\\]]/;\n
\n
  var curPunc;\n
  var curKeyword;\n
\n
  // Block openings which are closed by a matching keyword in the form of ("end" + keyword)\n
  // E.g. "task" => "endtask"\n
  var blockKeywords = words(\n
    "case checker class clocking config function generate interface module package" +\n
    "primitive program property specify sequence table task"\n
  );\n
\n
  // Opening/closing pairs\n
  var openClose = {};\n
  for (var keyword in blockKeywords) {\n
    openClose[keyword] = "end" + keyword;\n
  }\n
  openClose["begin"] = "end";\n
  openClose["casex"] = "endcase";\n
  openClose["casez"] = "endcase";\n
  openClose["do"   ] = "while";\n
  openClose["fork" ] = "join;join_any;join_none";\n
  openClose["covergroup"] = "endgroup";\n
\n
  for (var i in noIndentKeywords) {\n
    var keyword = noIndentKeywords[i];\n
    if (openClose[keyword]) {\n
      openClose[keyword] = undefined;\n
    }\n
  }\n
\n
  // Keywords which open statements that are ended with a semi-colon\n
  var statementKeywords = words("always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while");\n
\n
  function tokenBase(stream, state) {\n
    var ch = stream.peek();\n
    if (/[,;:\\.]/.test(ch)) {\n
      curPunc = stream.next();\n
      return null;\n
    }\n
    if (isBracketChar.test(ch)) {\n
      curPunc = stream.next();\n
      return "bracket";\n
    }\n
    // Macros (tick-defines)\n
    if (ch == \'`\') {\n
      stream.next();\n
      if (stream.eatWhile(/[\\w\\$_]/)) {\n
        return "def";\n
      } else {\n
        return null;\n
      }\n
    }\n
    // System calls\n
    if (ch == \'$\') {\n
      stream.next();\n
      if (stream.eatWhile(/[\\w\\$_]/)) {\n
        return "meta";\n
      } else {\n
        return null;\n
      }\n
    }\n
    // Time literals\n
    if (ch == \'#\') {\n
      stream.next();\n
      stream.eatWhile(/[\\d_.]/);\n
      return "def";\n
    }\n
    // Strings\n
    if (ch == \'"\') {\n
      stream.next();\n
      state.tokenize = tokenString(ch);\n
      return state.tokenize(stream, state);\n
    }\n
    // Comments\n
    if (ch == "/") {\n
      stream.next();\n
      if (stream.eat("*")) {\n
        state.tokenize = tokenComment;\n
        return tokenComment(stream, state);\n
      }\n
      if (stream.eat("/")) {\n
        stream.skipToEnd();\n
        return "comment";\n
      }\n
      stream.backUp(1);\n
    }\n
\n
    // Numeric literals\n
    if (stream.match(realLiteral) ||\n
        stream.match(decimalLiteral) ||\n
        stream.match(binaryLiteral) ||\n
        stream.match(octLiteral) ||\n
        stream.match(hexLiteral) ||\n
        stream.match(unsignedNumber) ||\n
        stream.match(realLiteral)) {\n
      return "number";\n
    }\n
\n
    // Operators\n
    if (stream.eatWhile(isOperatorChar)) {\n
      return "meta";\n
    }\n
\n
    // Keywords / plain variables\n
    if (stream.eatWhile(/[\\w\\$_]/)) {\n
      var cur = stream.current();\n
      if (keywords[cur]) {\n
        if (openClose[cur]) {\n
          curPunc = "newblock";\n
        }\n
        if (statementKeywords[cur]) {\n
          curPunc = "newstatement";\n
        }\n
        curKeyword = cur;\n
        return "keyword";\n
      }\n
      return "variable";\n
    }\n
\n
    stream.next();\n
    return null;\n
  }\n
\n
  function tokenString(quote) {\n
    return function(stream, state) {\n
      var escaped = false, next, end = false;\n
      while ((next = stream.next()) != null) {\n
        if (next == quote && !escaped) {end = true; break;}\n
        escaped = !escaped && next == "\\\\";\n
      }\n
      if (end || !(escaped || multiLineStrings))\n
        state.tokenize = tokenBase;\n
      return "string";\n
    };\n
  }\n
\n
  function tokenComment(stream, state) {\n
    var maybeEnd = false, ch;\n
    while (ch = stream.next()) {\n
      if (ch == "/" && maybeEnd) {\n
        state.tokenize = tokenBase;\n
        break;\n
      }\n
      maybeEnd = (ch == "*");\n
    }\n
    return "comment";\n
  }\n
\n
  function Context(indented, column, type, align, prev) {\n
    this.indented = indented;\n
    this.column = column;\n
    this.type = type;\n
    this.align = align;\n
    this.prev = prev;\n
  }\n
  function pushContext(state, col, type) {\n
    var indent = state.indented;\n
    var c = new Context(indent, col, type, null, state.context);\n
    return state.context = c;\n
  }\n
  function popContext(state) {\n
    var t = state.context.type;\n
    if (t == ")" || t == "]" || t == "}") {\n
      state.indented = state.context.indented;\n
    }\n
    return state.context = state.context.prev;\n
  }\n
\n
  function isClosing(text, contextClosing) {\n
    if (text == contextClosing) {\n
      return true;\n
    } else {\n
      // contextClosing may be mulitple keywords separated by ;\n
      var closingKeywords = contextClosing.split(";");\n
      for (var i in closingKeywords) {\n
        if (text == closingKeywords[i]) {\n
          return true;\n
        }\n
      }\n
      return false;\n
    }\n
  }\n
\n
  function buildElectricInputRegEx() {\n
    // Reindentation should occur on any bracket char: {}()[]\n
    // or on a match of any of the block closing keywords, at\n
    // the end of a line\n
    var allClosings = [];\n
    for (var i in openClose) {\n
      if (openClose[i]) {\n
        var closings = openClose[i].split(";");\n
        for (var j in closings) {\n
          allClosings.push(closings[j]);\n
        }\n
      }\n
    }\n
    var re = new RegExp("[{}()\\\\[\\\\]]|(" + allClosings.join("|") + ")$");\n
    return re;\n
  }\n
\n
  // Interface\n
  return {\n
\n
    // Regex to force current line to reindent\n
    electricInput: buildElectricInputRegEx(),\n
\n
    startState: function(basecolumn) {\n
      return {\n
        tokenize: null,\n
        context: new Context((basecolumn || 0) - indentUnit, 0, "top", false),\n
        indented: 0,\n
        startOfLine: true\n
      };\n
    },\n
\n
    token: function(stream, state) {\n
      var ctx = state.context;\n
      if (stream.sol()) {\n
        if (ctx.align == null) ctx.align = false;\n
        state.indented = stream.indentation();\n
        state.startOfLine = true;\n
      }\n
      if (stream.eatSpace()) return null;\n
      curPunc = null;\n
      curKeyword = null;\n
      var style = (state.tokenize || tokenBase)(stream, state);\n
      if (style == "comment" || style == "meta" || style == "variable") return style;\n
      if (ctx.align == null) ctx.align = true;\n
\n
      if (curPunc == ctx.type) {\n
        popContext(state);\n
      }\n
      else if ((curPunc == ";" && ctx.type == "statement") ||\n
               (ctx.type && isClosing(curKeyword, ctx.type))) {\n
        ctx = popContext(state);\n
        while (ctx && ctx.type == "statement") ctx = popContext(state);\n
      }\n
      else if (curPunc == "{") { pushContext(state, stream.column(), "}"); }\n
      else if (curPunc == "[") { pushContext(state, stream.column(), "]"); }\n
      else if (curPunc == "(") { pushContext(state, stream.column(), ")"); }\n
      else if (ctx && ctx.type == "endcase" && curPunc == ":") { pushContext(state, stream.column(), "statement"); }\n
      else if (curPunc == "newstatement") {\n
        pushContext(state, stream.column(), "statement");\n
      } else if (curPunc == "newblock") {\n
        if (curKeyword == "function" && ctx && (ctx.type == "statement" || ctx.type == "endgroup")) {\n
          // The \'function\' keyword can appear in some other contexts where it actually does not\n
          // indicate a function (import/export DPI and covergroup definitions).\n
          // Do nothing in this case\n
        } else if (curKeyword == "task" && ctx && ctx.type == "statement") {\n
          // Same thing for task\n
        } else {\n
          var close = openClose[curKeyword];\n
          pushContext(state, stream.column(), close);\n
        }\n
      }\n
\n
      state.startOfLine = false;\n
      return style;\n
    },\n
\n
    indent: function(state, textAfter) {\n
      if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n
      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n
      if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;\n
      var closing = false;\n
      var possibleClosing = textAfter.match(closingBracketOrWord);\n
      if (possibleClosing) {\n
        closing = isClosing(possibleClosing[0], ctx.type);\n
      }\n
      if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit);\n
      else if (closingBracket.test(ctx.type) && ctx.align && !dontAlignCalls) return ctx.column + (closing ? 0 : 1);\n
      else if (ctx.type == ")" && !closing) return ctx.indented + statementIndentUnit;\n
      else return ctx.indented + (closing ? 0 : indentUnit);\n
    },\n
\n
    blockCommentStart: "/*",\n
    blockCommentEnd: "*/",\n
    lineComment: "//"\n
  };\n
});\n
\n
CodeMirror.defineMIME("text/x-verilog", {\n
  name: "verilog"\n
});\n
CodeMirror.defineMIME("text/x-systemverilog", {\n
  name: "systemverilog"\n
});\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>12679</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
