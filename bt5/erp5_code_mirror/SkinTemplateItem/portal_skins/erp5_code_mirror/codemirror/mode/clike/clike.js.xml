<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts21897144.33</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>clike.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.defineMode("clike", function(config, parserConfig) {\n
  var indentUnit = config.indentUnit,\n
      statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n
      dontAlignCalls = parserConfig.dontAlignCalls,\n
      keywords = parserConfig.keywords || {},\n
      builtin = parserConfig.builtin || {},\n
      blockKeywords = parserConfig.blockKeywords || {},\n
      atoms = parserConfig.atoms || {},\n
      hooks = parserConfig.hooks || {},\n
      multiLineStrings = parserConfig.multiLineStrings,\n
      indentStatements = parserConfig.indentStatements !== false;\n
  var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n
\n
  var curPunc;\n
\n
  function tokenBase(stream, state) {\n
    var ch = stream.next();\n
    if (hooks[ch]) {\n
      var result = hooks[ch](stream, state);\n
      if (result !== false) return result;\n
    }\n
    if (ch == \'"\' || ch == "\'") {\n
      state.tokenize = tokenString(ch);\n
      return state.tokenize(stream, state);\n
    }\n
    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n
      curPunc = ch;\n
      return null;\n
    }\n
    if (/\\d/.test(ch)) {\n
      stream.eatWhile(/[\\w\\.]/);\n
      return "number";\n
    }\n
    if (ch == "/") {\n
      if (stream.eat("*")) {\n
        state.tokenize = tokenComment;\n
        return tokenComment(stream, state);\n
      }\n
      if (stream.eat("/")) {\n
        stream.skipToEnd();\n
        return "comment";\n
      }\n
    }\n
    if (isOperatorChar.test(ch)) {\n
      stream.eatWhile(isOperatorChar);\n
      return "operator";\n
    }\n
    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n
    var cur = stream.current();\n
    if (keywords.propertyIsEnumerable(cur)) {\n
      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = "newstatement";\n
      return "keyword";\n
    }\n
    if (builtin.propertyIsEnumerable(cur)) {\n
      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = "newstatement";\n
      return "builtin";\n
    }\n
    if (atoms.propertyIsEnumerable(cur)) return "atom";\n
    return "variable";\n
  }\n
\n
  function tokenString(quote) {\n
    return function(stream, state) {\n
      var escaped = false, next, end = false;\n
      while ((next = stream.next()) != null) {\n
        if (next == quote && !escaped) {end = true; break;}\n
        escaped = !escaped && next == "\\\\";\n
      }\n
      if (end || !(escaped || multiLineStrings))\n
        state.tokenize = null;\n
      return "string";\n
    };\n
  }\n
\n
  function tokenComment(stream, state) {\n
    var maybeEnd = false, ch;\n
    while (ch = stream.next()) {\n
      if (ch == "/" && maybeEnd) {\n
        state.tokenize = null;\n
        break;\n
      }\n
      maybeEnd = (ch == "*");\n
    }\n
    return "comment";\n
  }\n
\n
  function Context(indented, column, type, align, prev) {\n
    this.indented = indented;\n
    this.column = column;\n
    this.type = type;\n
    this.align = align;\n
    this.prev = prev;\n
  }\n
  function pushContext(state, col, type) {\n
    var indent = state.indented;\n
    if (state.context && state.context.type == "statement")\n
      indent = state.context.indented;\n
    return state.context = new Context(indent, col, type, null, state.context);\n
  }\n
  function popContext(state) {\n
    var t = state.context.type;\n
    if (t == ")" || t == "]" || t == "}")\n
      state.indented = state.context.indented;\n
    return state.context = state.context.prev;\n
  }\n
\n
  // Interface\n
\n
  return {\n
    startState: function(basecolumn) {\n
      return {\n
        tokenize: null,\n
        context: new Context((basecolumn || 0) - indentUnit, 0, "top", false),\n
        indented: 0,\n
        startOfLine: true\n
      };\n
    },\n
\n
    token: function(stream, state) {\n
      var ctx = state.context;\n
      if (stream.sol()) {\n
        if (ctx.align == null) ctx.align = false;\n
        state.indented = stream.indentation();\n
        state.startOfLine = true;\n
      }\n
      if (stream.eatSpace()) return null;\n
      curPunc = null;\n
      var style = (state.tokenize || tokenBase)(stream, state);\n
      if (style == "comment" || style == "meta") return style;\n
      if (ctx.align == null) ctx.align = true;\n
\n
      if ((curPunc == ";" || curPunc == ":" || curPunc == ",") && ctx.type == "statement") popContext(state);\n
      else if (curPunc == "{") pushContext(state, stream.column(), "}");\n
      else if (curPunc == "[") pushContext(state, stream.column(), "]");\n
      else if (curPunc == "(") pushContext(state, stream.column(), ")");\n
      else if (curPunc == "}") {\n
        while (ctx.type == "statement") ctx = popContext(state);\n
        if (ctx.type == "}") ctx = popContext(state);\n
        while (ctx.type == "statement") ctx = popContext(state);\n
      }\n
      else if (curPunc == ctx.type) popContext(state);\n
      else if (indentStatements &&\n
               (((ctx.type == "}" || ctx.type == "top") && curPunc != \';\') ||\n
                (ctx.type == "statement" && curPunc == "newstatement")))\n
        pushContext(state, stream.column(), "statement");\n
      state.startOfLine = false;\n
      return style;\n
    },\n
\n
    indent: function(state, textAfter) {\n
      if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n
      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n
      if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;\n
      var closing = firstChar == ctx.type;\n
      if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit);\n
      else if (ctx.align && (!dontAlignCalls || ctx.type != ")")) return ctx.column + (closing ? 0 : 1);\n
      else if (ctx.type == ")" && !closing) return ctx.indented + statementIndentUnit;\n
      else return ctx.indented + (closing ? 0 : indentUnit);\n
    },\n
\n
    electricChars: "{}",\n
    blockCommentStart: "/*",\n
    blockCommentEnd: "*/",\n
    lineComment: "//",\n
    fold: "brace"\n
  };\n
});\n
\n
  function words(str) {\n
    var obj = {}, words = str.split(" ");\n
    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n
    return obj;\n
  }\n
  var cKeywords = "auto if break int case long char register continue return default short do sizeof " +\n
    "double static else struct entry switch extern typedef float union for unsigned " +\n
    "goto while enum void const signed volatile";\n
\n
  function cppHook(stream, state) {\n
    if (!state.startOfLine) return false;\n
    for (;;) {\n
      if (stream.skipTo("\\\\")) {\n
        stream.next();\n
        if (stream.eol()) {\n
          state.tokenize = cppHook;\n
          break;\n
        }\n
      } else {\n
        stream.skipToEnd();\n
        state.tokenize = null;\n
        break;\n
      }\n
    }\n
    return "meta";\n
  }\n
\n
  function cpp11StringHook(stream, state) {\n
    stream.backUp(1);\n
    // Raw strings.\n
    if (stream.match(/(R|u8R|uR|UR|LR)/)) {\n
      var match = stream.match(/"([^\\s\\\\()]{0,16})\\(/);\n
      if (!match) {\n
        return false;\n
      }\n
      state.cpp11RawStringDelim = match[1];\n
      state.tokenize = tokenRawString;\n
      return tokenRawString(stream, state);\n
    }\n
    // Unicode strings/chars.\n
    if (stream.match(/(u8|u|U|L)/)) {\n
      if (stream.match(/["\']/, /* eat */ false)) {\n
        return "string";\n
      }\n
      return false;\n
    }\n
    // Ignore this hook.\n
    stream.next();\n
    return false;\n
  }\n
\n
  // C#-style strings where "" escapes a quote.\n
  function tokenAtString(stream, state) {\n
    var next;\n
    while ((next = stream.next()) != null) {\n
      if (next == \'"\' && !stream.eat(\'"\')) {\n
        state.tokenize = null;\n
        break;\n
      }\n
    }\n
    return "string";\n
  }\n
\n
  // C++11 raw string literal is <prefix>"<delim>( anything )<delim>", where\n
  // <delim> can be a string up to 16 characters long.\n
  function tokenRawString(stream, state) {\n
    // Escape characters that have special regex meanings.\n
    var delim = state.cpp11RawStringDelim.replace(/[^\\w\\s]/g, \'\\\\$&\');\n
    var match = stream.match(new RegExp(".*?\\\\)" + delim + \'"\'));\n
    if (match)\n
      state.tokenize = null;\n
    else\n
      stream.skipToEnd();\n
    return "string";\n
  }\n
\n
  function def(mimes, mode) {\n
    if (typeof mimes == "string") mimes = [mimes];\n
    var words = [];\n
    function add(obj) {\n
      if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))\n
        words.push(prop);\n
    }\n
    add(mode.keywords);\n
    add(mode.builtin);\n
    add(mode.atoms);\n
    if (words.length) {\n
      mode.helperType = mimes[0];\n
      CodeMirror.registerHelper("hintWords", mimes[0], words);\n
    }\n
\n
    for (var i = 0; i < mimes.length; ++i)\n
      CodeMirror.defineMIME(mimes[i], mode);\n
  }\n
\n
  def(["text/x-csrc", "text/x-c", "text/x-chdr"], {\n
    name: "clike",\n
    keywords: words(cKeywords),\n
    blockKeywords: words("case do else for if switch while struct"),\n
    atoms: words("null"),\n
    hooks: {"#": cppHook},\n
    modeProps: {fold: ["brace", "include"]}\n
  });\n
\n
  def(["text/x-c++src", "text/x-c++hdr"], {\n
    name: "clike",\n
    keywords: words(cKeywords + " asm dynamic_cast namespace reinterpret_cast try bool explicit new " +\n
                    "static_cast typeid catch operator template typename class friend private " +\n
                    "this using const_cast inline public throw virtual delete mutable protected " +\n
                    "wchar_t alignas alignof constexpr decltype nullptr noexcept thread_local final " +\n
                    "static_assert override"),\n
    blockKeywords: words("catch class do else finally for if struct switch try while"),\n
    atoms: words("true false null"),\n
    hooks: {\n
      "#": cppHook,\n
      "u": cpp11StringHook,\n
      "U": cpp11StringHook,\n
      "L": cpp11StringHook,\n
      "R": cpp11StringHook\n
    },\n
    modeProps: {fold: ["brace", "include"]}\n
  });\n
\n
  def("text/x-java", {\n
    name: "clike",\n
    keywords: words("abstract assert boolean break byte case catch char class const continue default " +\n
                    "do double else enum extends final finally float for goto if implements import " +\n
                    "instanceof int interface long native new package private protected public " +\n
                    "return short static strictfp super switch synchronized this throw throws transient " +\n
                    "try void volatile while"),\n
    blockKeywords: words("catch class do else finally for if switch try while"),\n
    atoms: words("true false null"),\n
    hooks: {\n
      "@": function(stream) {\n
        stream.eatWhile(/[\\w\\$_]/);\n
        return "meta";\n
      }\n
    },\n
    modeProps: {fold: ["brace", "import"]}\n
  });\n
\n
  def("text/x-csharp", {\n
    name: "clike",\n
    keywords: words("abstract as base break case catch checked class const continue" +\n
                    " default delegate do else enum event explicit extern finally fixed for" +\n
                    " foreach goto if implicit in interface internal is lock namespace new" +\n
                    " operator out override params private protected public readonly ref return sealed" +\n
                    " sizeof stackalloc static struct switch this throw try typeof unchecked" +\n
                    " unsafe using virtual void volatile while add alias ascending descending dynamic from get" +\n
                    " global group into join let orderby partial remove select set value var yield"),\n
    blockKeywords: words("catch class do else finally for foreach if struct switch try while"),\n
    builtin: words("Boolean Byte Char DateTime DateTimeOffset Decimal Double" +\n
                    " Guid Int16 Int32 Int64 Object SByte Single String TimeSpan UInt16 UInt32" +\n
                    " UInt64 bool byte char decimal double short int long object"  +\n
                    " sbyte float string ushort uint ulong"),\n
    atoms: words("true false null"),\n
    hooks: {\n
      "@": function(stream, state) {\n
        if (stream.eat(\'"\')) {\n
          state.tokenize = tokenAtString;\n
          return tokenAtString(stream, state);\n
        }\n
        stream.eatWhile(/[\\w\\$_]/);\n
        return "meta";\n
      }\n
    }\n
  });\n
\n
  function tokenTripleString(stream, state) {\n
    var escaped = false;\n
    while (!stream.eol()) {\n
      if (!escaped && stream.match(\'"""\')) {\n
        state.tokenize = null;\n
        break;\n
      }\n
      escaped = stream.next() != "\\\\" && !escaped;\n
    }\n
    return "string";\n
  }\n
\n
  def("text/x-scala", {\n
    name: "clike",\n
    keywords: words(\n
\n
      /* scala */\n
      "abstract case catch class def do else extends false final finally for forSome if " +\n
      "implicit import lazy match new null object override package private protected return " +\n
      "sealed super this throw trait try trye type val var while with yield _ : = => <- <: " +\n
      "<% >: # @ " +\n
\n
      /* package scala */\n
      "assert assume require print println printf readLine readBoolean readByte readShort " +\n
      "readChar readInt readLong readFloat readDouble " +\n
\n
      "AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either " +\n
      "Enumeration Equiv Error Exception Fractional Function IndexedSeq Integral Iterable " +\n
      "Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering " +\n
      "Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder " +\n
      "StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector :: #:: " +\n
\n
      /* package java.lang */\n
      "Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable " +\n
      "Compiler Double Exception Float Integer Long Math Number Object Package Pair Process " +\n
      "Runtime Runnable SecurityManager Short StackTraceElement StrictMath String " +\n
      "StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void"\n
    ),\n
    multiLineStrings: true,\n
    blockKeywords: words("catch class do else finally for forSome if match switch try while"),\n
    atoms: words("true false null"),\n
    indentStatements: false,\n
    hooks: {\n
      "@": function(stream) {\n
        stream.eatWhile(/[\\w\\$_]/);\n
        return "meta";\n
      },\n
      \'"\': function(stream, state) {\n
        if (!stream.match(\'""\')) return false;\n
        state.tokenize = tokenTripleString;\n
        return state.tokenize(stream, state);\n
      }\n
    }\n
  });\n
\n
  def(["x-shader/x-vertex", "x-shader/x-fragment"], {\n
    name: "clike",\n
    keywords: words("float int bool void " +\n
                    "vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 " +\n
                    "mat2 mat3 mat4 " +\n
                    "sampler1D sampler2D sampler3D samplerCube " +\n
                    "sampler1DShadow sampler2DShadow" +\n
                    "const attribute uniform varying " +\n
                    "break continue discard return " +\n
                    "for while do if else struct " +\n
                    "in out inout"),\n
    blockKeywords: words("for while do if else struct"),\n
    builtin: words("radians degrees sin cos tan asin acos atan " +\n
                    "pow exp log exp2 sqrt inversesqrt " +\n
                    "abs sign floor ceil fract mod min max clamp mix step smootstep " +\n
                    "length distance dot cross normalize ftransform faceforward " +\n
                    "reflect refract matrixCompMult " +\n
                    "lessThan lessThanEqual greaterThan greaterThanEqual " +\n
                    "equal notEqual any all not " +\n
                    "texture1D texture1DProj texture1DLod texture1DProjLod " +\n
                    "texture2D texture2DProj texture2DLod texture2DProjLod " +\n
                    "texture3D texture3DProj texture3DLod texture3DProjLod " +\n
                    "textureCube textureCubeLod " +\n
                    "shadow1D shadow2D shadow1DProj shadow2DProj " +\n
                    "shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod " +\n
                    "dFdx dFdy fwidth " +\n
                    "noise1 noise2 noise3 noise4"),\n
    atoms: words("true false " +\n
                "gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex " +\n
                "gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 " +\n
                "gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 " +\n
                "gl_FogCoord " +\n
                "gl_Position gl_PointSize gl_ClipVertex " +\n
                "gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor " +\n
                "gl_TexCoord gl_FogFragCoord " +\n
                "gl_FragCoord gl_FrontFacing " +\n
                "gl_FragColor gl_FragData gl_FragDepth " +\n
                "gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix " +\n
                "gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse " +\n
                "gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse " +\n
                "gl_TexureMatrixTranspose gl_ModelViewMatrixInverseTranspose " +\n
                "gl_ProjectionMatrixInverseTranspose " +\n
                "gl_ModelViewProjectionMatrixInverseTranspose " +\n
                "gl_TextureMatrixInverseTranspose " +\n
                "gl_NormalScale gl_DepthRange gl_ClipPlane " +\n
                "gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel " +\n
                "gl_FrontLightModelProduct gl_BackLightModelProduct " +\n
                "gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ " +\n
                "gl_FogParameters " +\n
                "gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords " +\n
                "gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats " +\n
                "gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits " +\n
                "gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits " +\n
                "gl_MaxDrawBuffers"),\n
    hooks: {"#": cppHook},\n
    modeProps: {fold: ["brace", "include"]}\n
  });\n
\n
  def("text/x-nesc", {\n
    name: "clike",\n
    keywords: words(cKeywords + "as atomic async call command component components configuration event generic " +\n
                    "implementation includes interface module new norace nx_struct nx_union post provides " +\n
                    "signal task uses abstract extends"),\n
    blockKeywords: words("case do else for if switch while struct"),\n
    atoms: words("null"),\n
    hooks: {"#": cppHook},\n
    modeProps: {fold: ["brace", "include"]}\n
  });\n
\n
  def("text/x-objectivec", {\n
    name: "clike",\n
    keywords: words(cKeywords + "inline restrict _Bool _Complex _Imaginery BOOL Class bycopy byref id IMP in " +\n
                    "inout nil oneway out Protocol SEL self super atomic nonatomic retain copy readwrite readonly"),\n
    atoms: words("YES NO NULL NILL ON OFF"),\n
    hooks: {\n
      "@": function(stream) {\n
        stream.eatWhile(/[\\w\\$]/);\n
        return "keyword";\n
      },\n
      "#": cppHook\n
    },\n
    modeProps: {fold: "brace"}\n
  });\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>18939</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
