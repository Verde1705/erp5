<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts21897148.45</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>markdown.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"), require("../xml/xml"), require("../meta"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror", "../xml/xml", "../meta"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.defineMode("markdown", function(cmCfg, modeCfg) {\n
\n
  var htmlFound = CodeMirror.modes.hasOwnProperty("xml");\n
  var htmlMode = CodeMirror.getMode(cmCfg, htmlFound ? {name: "xml", htmlMode: true} : "text/plain");\n
\n
  function getMode(name) {\n
    if (CodeMirror.findModeByName) {\n
      var found = CodeMirror.findModeByName(name);\n
      if (found) name = found.mime || found.mimes[0];\n
    }\n
    var mode = CodeMirror.getMode(cmCfg, name);\n
    return mode.name == "null" ? null : mode;\n
  }\n
\n
  // Should characters that affect highlighting be highlighted separate?\n
  // Does not include characters that will be output (such as `1.` and `-` for lists)\n
  if (modeCfg.highlightFormatting === undefined)\n
    modeCfg.highlightFormatting = false;\n
\n
  // Maximum number of nested blockquotes. Set to 0 for infinite nesting.\n
  // Excess `>` will emit `error` token.\n
  if (modeCfg.maxBlockquoteDepth === undefined)\n
    modeCfg.maxBlockquoteDepth = 0;\n
\n
  // Should underscores in words open/close em/strong?\n
  if (modeCfg.underscoresBreakWords === undefined)\n
    modeCfg.underscoresBreakWords = true;\n
\n
  // Turn on fenced code blocks? ("```" to start/end)\n
  if (modeCfg.fencedCodeBlocks === undefined) modeCfg.fencedCodeBlocks = false;\n
\n
  // Turn on task lists? ("- [ ] " and "- [x] ")\n
  if (modeCfg.taskLists === undefined) modeCfg.taskLists = false;\n
\n
  // Turn on strikethrough syntax\n
  if (modeCfg.strikethrough === undefined)\n
    modeCfg.strikethrough = false;\n
\n
  var codeDepth = 0;\n
\n
  var header   = \'header\'\n
  ,   code     = \'comment\'\n
  ,   quote    = \'quote\'\n
  ,   list1    = \'variable-2\'\n
  ,   list2    = \'variable-3\'\n
  ,   list3    = \'keyword\'\n
  ,   hr       = \'hr\'\n
  ,   image    = \'tag\'\n
  ,   formatting = \'formatting\'\n
  ,   linkinline = \'link\'\n
  ,   linkemail = \'link\'\n
  ,   linktext = \'link\'\n
  ,   linkhref = \'string\'\n
  ,   em       = \'em\'\n
  ,   strong   = \'strong\'\n
  ,   strikethrough = \'strikethrough\';\n
\n
  var hrRE = /^([*\\-=_])(?:\\s*\\1){2,}\\s*$/\n
  ,   ulRE = /^[*\\-+]\\s+/\n
  ,   olRE = /^[0-9]+\\.\\s+/\n
  ,   taskListRE = /^\\[(x| )\\](?=\\s)/ // Must follow ulRE or olRE\n
  ,   atxHeaderRE = /^#+/\n
  ,   setextHeaderRE = /^(?:\\={1,}|-{1,})$/\n
  ,   textRE = /^[^#!\\[\\]*_\\\\<>` "\'(~]+/;\n
\n
  function switchInline(stream, state, f) {\n
    state.f = state.inline = f;\n
    return f(stream, state);\n
  }\n
\n
  function switchBlock(stream, state, f) {\n
    state.f = state.block = f;\n
    return f(stream, state);\n
  }\n
\n
\n
  // Blocks\n
\n
  function blankLine(state) {\n
    // Reset linkTitle state\n
    state.linkTitle = false;\n
    // Reset EM state\n
    state.em = false;\n
    // Reset STRONG state\n
    state.strong = false;\n
    // Reset strikethrough state\n
    state.strikethrough = false;\n
    // Reset state.quote\n
    state.quote = 0;\n
    if (!htmlFound && state.f == htmlBlock) {\n
      state.f = inlineNormal;\n
      state.block = blockNormal;\n
    }\n
    // Reset state.trailingSpace\n
    state.trailingSpace = 0;\n
    state.trailingSpaceNewLine = false;\n
    // Mark this line as blank\n
    state.thisLineHasContent = false;\n
    return null;\n
  }\n
\n
  function blockNormal(stream, state) {\n
\n
    var sol = stream.sol();\n
\n
    var prevLineIsList = (state.list !== false);\n
    if (state.list !== false && state.indentationDiff >= 0) { // Continued list\n
      if (state.indentationDiff < 4) { // Only adjust indentation if *not* a code block\n
        state.indentation -= state.indentationDiff;\n
      }\n
      state.list = null;\n
    } else if (state.list !== false && state.indentation > 0) {\n
      state.list = null;\n
      state.listDepth = Math.floor(state.indentation / 4);\n
    } else if (state.list !== false) { // No longer a list\n
      state.list = false;\n
      state.listDepth = 0;\n
    }\n
\n
    var match = null;\n
    if (state.indentationDiff >= 4) {\n
      state.indentation -= 4;\n
      stream.skipToEnd();\n
      return code;\n
    } else if (stream.eatSpace()) {\n
      return null;\n
    } else if (match = stream.match(atxHeaderRE)) {\n
      state.header = match[0].length <= 6 ? match[0].length : 6;\n
      if (modeCfg.highlightFormatting) state.formatting = "header";\n
      state.f = state.inline;\n
      return getType(state);\n
    } else if (state.prevLineHasContent && (match = stream.match(setextHeaderRE))) {\n
      state.header = match[0].charAt(0) == \'=\' ? 1 : 2;\n
      if (modeCfg.highlightFormatting) state.formatting = "header";\n
      state.f = state.inline;\n
      return getType(state);\n
    } else if (stream.eat(\'>\')) {\n
      state.indentation++;\n
      state.quote = sol ? 1 : state.quote + 1;\n
      if (modeCfg.highlightFormatting) state.formatting = "quote";\n
      stream.eatSpace();\n
      return getType(state);\n
    } else if (stream.peek() === \'[\') {\n
      return switchInline(stream, state, footnoteLink);\n
    } else if (stream.match(hrRE, true)) {\n
      return hr;\n
    } else if ((!state.prevLineHasContent || prevLineIsList) && (stream.match(ulRE, false) || stream.match(olRE, false))) {\n
      var listType = null;\n
      if (stream.match(ulRE, true)) {\n
        listType = \'ul\';\n
      } else {\n
        stream.match(olRE, true);\n
        listType = \'ol\';\n
      }\n
      state.indentation += 4;\n
      state.list = true;\n
      state.listDepth++;\n
      if (modeCfg.taskLists && stream.match(taskListRE, false)) {\n
        state.taskList = true;\n
      }\n
      state.f = state.inline;\n
      if (modeCfg.highlightFormatting) state.formatting = ["list", "list-" + listType];\n
      return getType(state);\n
    } else if (modeCfg.fencedCodeBlocks && stream.match(/^```[ \\t]*([\\w+#]*)/, true)) {\n
      // try switching mode\n
      state.localMode = getMode(RegExp.$1);\n
      if (state.localMode) state.localState = state.localMode.startState();\n
      state.f = state.block = local;\n
      if (modeCfg.highlightFormatting) state.formatting = "code-block";\n
      state.code = true;\n
      return getType(state);\n
    }\n
\n
    return switchInline(stream, state, state.inline);\n
  }\n
\n
  function htmlBlock(stream, state) {\n
    var style = htmlMode.token(stream, state.htmlState);\n
    if ((htmlFound && state.htmlState.tagStart === null && !state.htmlState.context) ||\n
        (state.md_inside && stream.current().indexOf(">") > -1)) {\n
      state.f = inlineNormal;\n
      state.block = blockNormal;\n
      state.htmlState = null;\n
    }\n
    return style;\n
  }\n
\n
  function local(stream, state) {\n
    if (stream.sol() && stream.match("```", false)) {\n
      state.localMode = state.localState = null;\n
      state.f = state.block = leavingLocal;\n
      return null;\n
    } else if (state.localMode) {\n
      return state.localMode.token(stream, state.localState);\n
    } else {\n
      stream.skipToEnd();\n
      return code;\n
    }\n
  }\n
\n
  function leavingLocal(stream, state) {\n
    stream.match("```");\n
    state.block = blockNormal;\n
    state.f = inlineNormal;\n
    if (modeCfg.highlightFormatting) state.formatting = "code-block";\n
    state.code = true;\n
    var returnType = getType(state);\n
    state.code = false;\n
    return returnType;\n
  }\n
\n
  // Inline\n
  function getType(state) {\n
    var styles = [];\n
\n
    if (state.formatting) {\n
      styles.push(formatting);\n
\n
      if (typeof state.formatting === "string") state.formatting = [state.formatting];\n
\n
      for (var i = 0; i < state.formatting.length; i++) {\n
        styles.push(formatting + "-" + state.formatting[i]);\n
\n
        if (state.formatting[i] === "header") {\n
          styles.push(formatting + "-" + state.formatting[i] + "-" + state.header);\n
        }\n
\n
        // Add `formatting-quote` and `formatting-quote-#` for blockquotes\n
        // Add `error` instead if the maximum blockquote nesting depth is passed\n
        if (state.formatting[i] === "quote") {\n
          if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n
            styles.push(formatting + "-" + state.formatting[i] + "-" + state.quote);\n
          } else {\n
            styles.push("error");\n
          }\n
        }\n
      }\n
    }\n
\n
    if (state.taskOpen) {\n
      styles.push("meta");\n
      return styles.length ? styles.join(\' \') : null;\n
    }\n
    if (state.taskClosed) {\n
      styles.push("property");\n
      return styles.length ? styles.join(\' \') : null;\n
    }\n
\n
    if (state.linkHref) {\n
      styles.push(linkhref);\n
      return styles.length ? styles.join(\' \') : null;\n
    }\n
\n
    if (state.strong) { styles.push(strong); }\n
    if (state.em) { styles.push(em); }\n
    if (state.strikethrough) { styles.push(strikethrough); }\n
\n
    if (state.linkText) { styles.push(linktext); }\n
\n
    if (state.code) { styles.push(code); }\n
\n
    if (state.header) { styles.push(header); styles.push(header + "-" + state.header); }\n
\n
    if (state.quote) {\n
      styles.push(quote);\n
\n
      // Add `quote-#` where the maximum for `#` is modeCfg.maxBlockquoteDepth\n
      if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n
        styles.push(quote + "-" + state.quote);\n
      } else {\n
        styles.push(quote + "-" + modeCfg.maxBlockquoteDepth);\n
      }\n
    }\n
\n
    if (state.list !== false) {\n
      var listMod = (state.listDepth - 1) % 3;\n
      if (!listMod) {\n
        styles.push(list1);\n
      } else if (listMod === 1) {\n
        styles.push(list2);\n
      } else {\n
        styles.push(list3);\n
      }\n
    }\n
\n
    if (state.trailingSpaceNewLine) {\n
      styles.push("trailing-space-new-line");\n
    } else if (state.trailingSpace) {\n
      styles.push("trailing-space-" + (state.trailingSpace % 2 ? "a" : "b"));\n
    }\n
\n
    return styles.length ? styles.join(\' \') : null;\n
  }\n
\n
  function handleText(stream, state) {\n
    if (stream.match(textRE, true)) {\n
      return getType(state);\n
    }\n
    return undefined;\n
  }\n
\n
  function inlineNormal(stream, state) {\n
    var style = state.text(stream, state);\n
    if (typeof style !== \'undefined\')\n
      return style;\n
\n
    if (state.list) { // List marker (*, +, -, 1., etc)\n
      state.list = null;\n
      return getType(state);\n
    }\n
\n
    if (state.taskList) {\n
      var taskOpen = stream.match(taskListRE, true)[1] !== "x";\n
      if (taskOpen) state.taskOpen = true;\n
      else state.taskClosed = true;\n
      if (modeCfg.highlightFormatting) state.formatting = "task";\n
      state.taskList = false;\n
      return getType(state);\n
    }\n
\n
    state.taskOpen = false;\n
    state.taskClosed = false;\n
\n
    if (state.header && stream.match(/^#+$/, true)) {\n
      if (modeCfg.highlightFormatting) state.formatting = "header";\n
      return getType(state);\n
    }\n
\n
    // Get sol() value now, before character is consumed\n
    var sol = stream.sol();\n
\n
    var ch = stream.next();\n
\n
    if (ch === \'\\\\\') {\n
      stream.next();\n
      if (modeCfg.highlightFormatting) {\n
        var type = getType(state);\n
        return type ? type + " formatting-escape" : "formatting-escape";\n
      }\n
    }\n
\n
    // Matches link titles present on next line\n
    if (state.linkTitle) {\n
      state.linkTitle = false;\n
      var matchCh = ch;\n
      if (ch === \'(\') {\n
        matchCh = \')\';\n
      }\n
      matchCh = (matchCh+\'\').replace(/([.?*+^$[\\]\\\\(){}|-])/g, "\\\\$1");\n
      var regex = \'^\\\\s*(?:[^\' + matchCh + \'\\\\\\\\]+|\\\\\\\\\\\\\\\\|\\\\\\\\.)\' + matchCh;\n
      if (stream.match(new RegExp(regex), true)) {\n
        return linkhref;\n
      }\n
    }\n
\n
    // If this block is changed, it may need to be updated in GFM mode\n
    if (ch === \'`\') {\n
      var previousFormatting = state.formatting;\n
      if (modeCfg.highlightFormatting) state.formatting = "code";\n
      var t = getType(state);\n
      var before = stream.pos;\n
      stream.eatWhile(\'`\');\n
      var difference = 1 + stream.pos - before;\n
      if (!state.code) {\n
        codeDepth = difference;\n
        state.code = true;\n
        return getType(state);\n
      } else {\n
        if (difference === codeDepth) { // Must be exact\n
          state.code = false;\n
          return t;\n
        }\n
        state.formatting = previousFormatting;\n
        return getType(state);\n
      }\n
    } else if (state.code) {\n
      return getType(state);\n
    }\n
\n
    if (ch === \'!\' && stream.match(/\\[[^\\]]*\\] ?(?:\\(|\\[)/, false)) {\n
      stream.match(/\\[[^\\]]*\\]/);\n
      state.inline = state.f = linkHref;\n
      return image;\n
    }\n
\n
    if (ch === \'[\' && stream.match(/.*\\](\\(.*\\)| ?\\[.*\\])/, false)) {\n
      state.linkText = true;\n
      if (modeCfg.highlightFormatting) state.formatting = "link";\n
      return getType(state);\n
    }\n
\n
    if (ch === \']\' && state.linkText && stream.match(/\\(.*\\)| ?\\[.*\\]/, false)) {\n
      if (modeCfg.highlightFormatting) state.formatting = "link";\n
      var type = getType(state);\n
      state.linkText = false;\n
      state.inline = state.f = linkHref;\n
      return type;\n
    }\n
\n
    if (ch === \'<\' && stream.match(/^(https?|ftps?):\\/\\/(?:[^\\\\>]|\\\\.)+>/, false)) {\n
      state.f = state.inline = linkInline;\n
      if (modeCfg.highlightFormatting) state.formatting = "link";\n
      var type = getType(state);\n
      if (type){\n
        type += " ";\n
      } else {\n
        type = "";\n
      }\n
      return type + linkinline;\n
    }\n
\n
    if (ch === \'<\' && stream.match(/^[^> \\\\]+@(?:[^\\\\>]|\\\\.)+>/, false)) {\n
      state.f = state.inline = linkInline;\n
      if (modeCfg.highlightFormatting) state.formatting = "link";\n
      var type = getType(state);\n
      if (type){\n
        type += " ";\n
      } else {\n
        type = "";\n
      }\n
      return type + linkemail;\n
    }\n
\n
    if (ch === \'<\' && stream.match(/^\\w/, false)) {\n
      if (stream.string.indexOf(">") != -1) {\n
        var atts = stream.string.substring(1,stream.string.indexOf(">"));\n
        if (/markdown\\s*=\\s*(\'|"){0,1}1(\'|"){0,1}/.test(atts)) {\n
          state.md_inside = true;\n
        }\n
      }\n
      stream.backUp(1);\n
      state.htmlState = CodeMirror.startState(htmlMode);\n
      return switchBlock(stream, state, htmlBlock);\n
    }\n
\n
    if (ch === \'<\' && stream.match(/^\\/\\w*?>/)) {\n
      state.md_inside = false;\n
      return "tag";\n
    }\n
\n
    var ignoreUnderscore = false;\n
    if (!modeCfg.underscoresBreakWords) {\n
      if (ch === \'_\' && stream.peek() !== \'_\' && stream.match(/(\\w)/, false)) {\n
        var prevPos = stream.pos - 2;\n
        if (prevPos >= 0) {\n
          var prevCh = stream.string.charAt(prevPos);\n
          if (prevCh !== \'_\' && prevCh.match(/(\\w)/, false)) {\n
            ignoreUnderscore = true;\n
          }\n
        }\n
      }\n
    }\n
    if (ch === \'*\' || (ch === \'_\' && !ignoreUnderscore)) {\n
      if (sol && stream.peek() === \' \') {\n
        // Do nothing, surrounded by newline and space\n
      } else if (state.strong === ch && stream.eat(ch)) { // Remove STRONG\n
        if (modeCfg.highlightFormatting) state.formatting = "strong";\n
        var t = getType(state);\n
        state.strong = false;\n
        return t;\n
      } else if (!state.strong && stream.eat(ch)) { // Add STRONG\n
        state.strong = ch;\n
        if (modeCfg.highlightFormatting) state.formatting = "strong";\n
        return getType(state);\n
      } else if (state.em === ch) { // Remove EM\n
        if (modeCfg.highlightFormatting) state.formatting = "em";\n
        var t = getType(state);\n
        state.em = false;\n
        return t;\n
      } else if (!state.em) { // Add EM\n
        state.em = ch;\n
        if (modeCfg.highlightFormatting) state.formatting = "em";\n
        return getType(state);\n
      }\n
    } else if (ch === \' \') {\n
      if (stream.eat(\'*\') || stream.eat(\'_\')) { // Probably surrounded by spaces\n
        if (stream.peek() === \' \') { // Surrounded by spaces, ignore\n
          return getType(state);\n
        } else { // Not surrounded by spaces, back up pointer\n
          stream.backUp(1);\n
        }\n
      }\n
    }\n
\n
    if (modeCfg.strikethrough) {\n
      if (ch === \'~\' && stream.eatWhile(ch)) {\n
        if (state.strikethrough) {// Remove strikethrough\n
          if (modeCfg.highlightFormatting) state.formatting = "strikethrough";\n
          var t = getType(state);\n
          state.strikethrough = false;\n
          return t;\n
        } else if (stream.match(/^[^\\s]/, false)) {// Add strikethrough\n
          state.strikethrough = true;\n
          if (modeCfg.highlightFormatting) state.formatting = "strikethrough";\n
          return getType(state);\n
        }\n
      } else if (ch === \' \') {\n
        if (stream.match(/^~~/, true)) { // Probably surrounded by space\n
          if (stream.peek() === \' \') { // Surrounded by spaces, ignore\n
            return getType(state);\n
          } else { // Not surrounded by spaces, back up pointer\n
            stream.backUp(2);\n
          }\n
        }\n
      }\n
    }\n
\n
    if (ch === \' \') {\n
      if (stream.match(/ +$/, false)) {\n
        state.trailingSpace++;\n
      } else if (state.trailingSpace) {\n
        state.trailingSpaceNewLine = true;\n
      }\n
    }\n
\n
    return getType(state);\n
  }\n
\n
  function linkInline(stream, state) {\n
    var ch = stream.next();\n
\n
    if (ch === ">") {\n
      state.f = state.inline = inlineNormal;\n
      if (modeCfg.highlightFormatting) state.formatting = "link";\n
      var type = getType(state);\n
      if (type){\n
        type += " ";\n
      } else {\n
        type = "";\n
      }\n
      return type + linkinline;\n
    }\n
\n
    stream.match(/^[^>]+/, true);\n
\n
    return linkinline;\n
  }\n
\n
  function linkHref(stream, state) {\n
    // Check if space, and return NULL if so (to avoid marking the space)\n
    if(stream.eatSpace()){\n
      return null;\n
    }\n
    var ch = stream.next();\n
    if (ch === \'(\' || ch === \'[\') {\n
      state.f = state.inline = getLinkHrefInside(ch === "(" ? ")" : "]");\n
      if (modeCfg.highlightFormatting) state.formatting = "link-string";\n
      state.linkHref = true;\n
      return getType(state);\n
    }\n
    return \'error\';\n
  }\n
\n
  function getLinkHrefInside(endChar) {\n
    return function(stream, state) {\n
      var ch = stream.next();\n
\n
      if (ch === endChar) {\n
        state.f = state.inline = inlineNormal;\n
        if (modeCfg.highlightFormatting) state.formatting = "link-string";\n
        var returnState = getType(state);\n
        state.linkHref = false;\n
        return returnState;\n
      }\n
\n
      if (stream.match(inlineRE(endChar), true)) {\n
        stream.backUp(1);\n
      }\n
\n
      state.linkHref = true;\n
      return getType(state);\n
    };\n
  }\n
\n
  function footnoteLink(stream, state) {\n
    if (stream.match(/^[^\\]]*\\]:/, false)) {\n
      state.f = footnoteLinkInside;\n
      stream.next(); // Consume [\n
      if (modeCfg.highlightFormatting) state.formatting = "link";\n
      state.linkText = true;\n
      return getType(state);\n
    }\n
    return switchInline(stream, state, inlineNormal);\n
  }\n
\n
  function footnoteLinkInside(stream, state) {\n
    if (stream.match(/^\\]:/, true)) {\n
      state.f = state.inline = footnoteUrl;\n
      if (modeCfg.highlightFormatting) state.formatting = "link";\n
      var returnType = getType(state);\n
      state.linkText = false;\n
      return returnType;\n
    }\n
\n
    stream.match(/^[^\\]]+/, true);\n
\n
    return linktext;\n
  }\n
\n
  function footnoteUrl(stream, state) {\n
    // Check if space, and return NULL if so (to avoid marking the space)\n
    if(stream.eatSpace()){\n
      return null;\n
    }\n
    // Match URL\n
    stream.match(/^[^\\s]+/, true);\n
    // Check for link title\n
    if (stream.peek() === undefined) { // End of line, set flag to check next line\n
      state.linkTitle = true;\n
    } else { // More content on line, check if link title\n
      stream.match(/^(?:\\s+(?:"(?:[^"\\\\]|\\\\\\\\|\\\\.)+"|\'(?:[^\'\\\\]|\\\\\\\\|\\\\.)+\'|\\((?:[^)\\\\]|\\\\\\\\|\\\\.)+\\)))?/, true);\n
    }\n
    state.f = state.inline = inlineNormal;\n
    return linkhref;\n
  }\n
\n
  var savedInlineRE = [];\n
  function inlineRE(endChar) {\n
    if (!savedInlineRE[endChar]) {\n
      // Escape endChar for RegExp (taken from http://stackoverflow.com/a/494122/526741)\n
      endChar = (endChar+\'\').replace(/([.?*+^$[\\]\\\\(){}|-])/g, "\\\\$1");\n
      // Match any non-endChar, escaped character, as well as the closing\n
      // endChar.\n
      savedInlineRE[endChar] = new RegExp(\'^(?:[^\\\\\\\\]|\\\\\\\\.)*?(\' + endChar + \')\');\n
    }\n
    return savedInlineRE[endChar];\n
  }\n
\n
  var mode = {\n
    startState: function() {\n
      return {\n
        f: blockNormal,\n
\n
        prevLineHasContent: false,\n
        thisLineHasContent: false,\n
\n
        block: blockNormal,\n
        htmlState: null,\n
        indentation: 0,\n
\n
        inline: inlineNormal,\n
        text: handleText,\n
\n
        formatting: false,\n
        linkText: false,\n
        linkHref: false,\n
        linkTitle: false,\n
        em: false,\n
        strong: false,\n
        header: 0,\n
        taskList: false,\n
        list: false,\n
        listDepth: 0,\n
        quote: 0,\n
        trailingSpace: 0,\n
        trailingSpaceNewLine: false,\n
        strikethrough: false\n
      };\n
    },\n
\n
    copyState: function(s) {\n
      return {\n
        f: s.f,\n
\n
        prevLineHasContent: s.prevLineHasContent,\n
        thisLineHasContent: s.thisLineHasContent,\n
\n
        block: s.block,\n
        htmlState: s.htmlState && CodeMirror.copyState(htmlMode, s.htmlState),\n
        indentation: s.indentation,\n
\n
        localMode: s.localMode,\n
        localState: s.localMode ? CodeMirror.copyState(s.localMode, s.localState) : null,\n
\n
        inline: s.inline,\n
        text: s.text,\n
        formatting: false,\n
        linkTitle: s.linkTitle,\n
        em: s.em,\n
        strong: s.strong,\n
        strikethrough: s.strikethrough,\n
        header: s.header,\n
        taskList: s.taskList,\n
        list: s.list,\n
        listDepth: s.listDepth,\n
        quote: s.quote,\n
        trailingSpace: s.trailingSpace,\n
        trailingSpaceNewLine: s.trailingSpaceNewLine,\n
        md_inside: s.md_inside\n
      };\n
    },\n
\n
    token: function(stream, state) {\n
\n
      // Reset state.formatting\n
      state.formatting = false;\n
\n
      if (stream.sol()) {\n
        var forceBlankLine = !!state.header;\n
\n
        // Reset state.header\n
        state.header = 0;\n
\n
        if (stream.match(/^\\s*$/, true) || forceBlankLine) {\n
          state.prevLineHasContent = false;\n
          blankLine(state);\n
          return forceBlankLine ? this.token(stream, state) : null;\n
        } else {\n
          state.prevLineHasContent = state.thisLineHasContent;\n
          state.thisLineHasContent = true;\n
        }\n
\n
        // Reset state.taskList\n
        state.taskList = false;\n
\n
        // Reset state.code\n
        state.code = false;\n
\n
        // Reset state.trailingSpace\n
        state.trailingSpace = 0;\n
        state.trailingSpaceNewLine = false;\n
\n
        state.f = state.block;\n
        var indentation = stream.match(/^\\s*/, true)[0].replace(/\\t/g, \'    \').length;\n
        var difference = Math.floor((indentation - state.indentation) / 4) * 4;\n
        if (difference > 4) difference = 4;\n
        var adjustedIndentation = state.indentation + difference;\n
        state.indentationDiff = adjustedIndentation - state.indentation;\n
        state.indentation = adjustedIndentation;\n
        if (indentation > 0) return null;\n
      }\n
      return state.f(stream, state);\n
    },\n
\n
    innerMode: function(state) {\n
      if (state.block == htmlBlock) return {state: state.htmlState, mode: htmlMode};\n
      if (state.localState) return {state: state.localState, mode: state.localMode};\n
      return {state: state, mode: mode};\n
    },\n
\n
    blankLine: blankLine,\n
\n
    getType: getType,\n
\n
    fold: "markdown"\n
  };\n
  return mode;\n
}, "xml");\n
\n
CodeMirror.defineMIME("text/x-markdown", "markdown");\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>23434</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
