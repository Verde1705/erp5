<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts21897141.45</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>django.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"), require("../htmlmixed/htmlmixed"),\n
        require("../../addon/mode/overlay"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror", "../htmlmixed/htmlmixed",\n
            "../../addon/mode/overlay"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  "use strict";\n
\n
  CodeMirror.defineMode("django:inner", function() {\n
    var keywords = ["block", "endblock", "for", "endfor", "in", "true", "false",\n
                    "loop", "none", "self", "super", "if", "endif", "as", "not", "and",\n
                    "else", "import", "with", "endwith", "without", "context", "ifequal", "endifequal",\n
                    "ifnotequal", "endifnotequal", "extends", "include", "load", "length", "comment",\n
                    "endcomment", "empty"];\n
    keywords = new RegExp("^((" + keywords.join(")|(") + "))\\\\b");\n
\n
    function tokenBase (stream, state) {\n
      stream.eatWhile(/[^\\{]/);\n
      var ch = stream.next();\n
      if (ch == "{") {\n
        if (ch = stream.eat(/\\{|%|#/)) {\n
          state.tokenize = inTag(ch);\n
          return "tag";\n
        }\n
      }\n
    }\n
    function inTag (close) {\n
      if (close == "{") {\n
        close = "}";\n
      }\n
      return function (stream, state) {\n
        var ch = stream.next();\n
        if ((ch == close) && stream.eat("}")) {\n
          state.tokenize = tokenBase;\n
          return "tag";\n
        }\n
        if (stream.match(keywords)) {\n
          return "keyword";\n
        }\n
        return close == "#" ? "comment" : "string";\n
      };\n
    }\n
    return {\n
      startState: function () {\n
        return {tokenize: tokenBase};\n
      },\n
      token: function (stream, state) {\n
        return state.tokenize(stream, state);\n
      }\n
    };\n
  });\n
\n
  CodeMirror.defineMode("django", function(config) {\n
    var htmlBase = CodeMirror.getMode(config, "text/html");\n
    var djangoInner = CodeMirror.getMode(config, "django:inner");\n
    return CodeMirror.overlayMode(htmlBase, djangoInner);\n
  });\n
\n
  CodeMirror.defineMIME("text/x-django", "django");\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2316</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
