<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts21897295.56</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>closebrackets.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  var DEFAULT_BRACKETS = "()[]{}\'\'\\"\\"";\n
  var DEFAULT_EXPLODE_ON_ENTER = "[]{}";\n
  var SPACE_CHAR_REGEX = /\\s/;\n
\n
  var Pos = CodeMirror.Pos;\n
\n
  CodeMirror.defineOption("autoCloseBrackets", false, function(cm, val, old) {\n
    if (old != CodeMirror.Init && old)\n
      cm.removeKeyMap("autoCloseBrackets");\n
    if (!val) return;\n
    var pairs = DEFAULT_BRACKETS, explode = DEFAULT_EXPLODE_ON_ENTER;\n
    if (typeof val == "string") pairs = val;\n
    else if (typeof val == "object") {\n
      if (val.pairs != null) pairs = val.pairs;\n
      if (val.explode != null) explode = val.explode;\n
    }\n
    var map = buildKeymap(pairs);\n
    if (explode) map.Enter = buildExplodeHandler(explode);\n
    cm.addKeyMap(map);\n
  });\n
\n
  function charsAround(cm, pos) {\n
    var str = cm.getRange(Pos(pos.line, pos.ch - 1),\n
                          Pos(pos.line, pos.ch + 1));\n
    return str.length == 2 ? str : null;\n
  }\n
\n
  // Project the token type that will exists after the given char is\n
  // typed, and use it to determine whether it would cause the start\n
  // of a string token.\n
  function enteringString(cm, pos, ch) {\n
    var line = cm.getLine(pos.line);\n
    var token = cm.getTokenAt(pos);\n
    if (/\\bstring2?\\b/.test(token.type)) return false;\n
    var stream = new CodeMirror.StringStream(line.slice(0, pos.ch) + ch + line.slice(pos.ch), 4);\n
    stream.pos = stream.start = token.start;\n
    for (;;) {\n
      var type1 = cm.getMode().token(stream, token.state);\n
      if (stream.pos >= pos.ch + 1) return /\\bstring2?\\b/.test(type1);\n
      stream.start = stream.pos;\n
    }\n
  }\n
\n
  function buildKeymap(pairs) {\n
    var map = {\n
      name : "autoCloseBrackets",\n
      Backspace: function(cm) {\n
        if (cm.getOption("disableInput")) return CodeMirror.Pass;\n
        var ranges = cm.listSelections();\n
        for (var i = 0; i < ranges.length; i++) {\n
          if (!ranges[i].empty()) return CodeMirror.Pass;\n
          var around = charsAround(cm, ranges[i].head);\n
          if (!around || pairs.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n
        }\n
        for (var i = ranges.length - 1; i >= 0; i--) {\n
          var cur = ranges[i].head;\n
          cm.replaceRange("", Pos(cur.line, cur.ch - 1), Pos(cur.line, cur.ch + 1));\n
        }\n
      }\n
    };\n
    var closingBrackets = "";\n
    for (var i = 0; i < pairs.length; i += 2) (function(left, right) {\n
      closingBrackets += right;\n
      map["\'" + left + "\'"] = function(cm) {\n
        if (cm.getOption("disableInput")) return CodeMirror.Pass;\n
        var ranges = cm.listSelections(), type, next;\n
        for (var i = 0; i < ranges.length; i++) {\n
          var range = ranges[i], cur = range.head, curType;\n
          var next = cm.getRange(cur, Pos(cur.line, cur.ch + 1));\n
          if (!range.empty()) {\n
            curType = "surround";\n
          } else if (left == right && next == right) {\n
            if (cm.getRange(cur, Pos(cur.line, cur.ch + 3)) == left + left + left)\n
              curType = "skipThree";\n
            else\n
              curType = "skip";\n
          } else if (left == right && cur.ch > 1 &&\n
                     cm.getRange(Pos(cur.line, cur.ch - 2), cur) == left + left &&\n
                     (cur.ch <= 2 || cm.getRange(Pos(cur.line, cur.ch - 3), Pos(cur.line, cur.ch - 2)) != left)) {\n
            curType = "addFour";\n
          } else if (left == \'"\' || left == "\'") {\n
            if (!CodeMirror.isWordChar(next) && enteringString(cm, cur, left)) curType = "both";\n
            else return CodeMirror.Pass;\n
          } else if (cm.getLine(cur.line).length == cur.ch || closingBrackets.indexOf(next) >= 0 || SPACE_CHAR_REGEX.test(next)) {\n
            curType = "both";\n
          } else {\n
            return CodeMirror.Pass;\n
          }\n
          if (!type) type = curType;\n
          else if (type != curType) return CodeMirror.Pass;\n
        }\n
\n
        cm.operation(function() {\n
          if (type == "skip") {\n
            cm.execCommand("goCharRight");\n
          } else if (type == "skipThree") {\n
            for (var i = 0; i < 3; i++)\n
              cm.execCommand("goCharRight");\n
          } else if (type == "surround") {\n
            var sels = cm.getSelections();\n
            for (var i = 0; i < sels.length; i++)\n
              sels[i] = left + sels[i] + right;\n
            cm.replaceSelections(sels, "around");\n
          } else if (type == "both") {\n
            cm.replaceSelection(left + right, null);\n
            cm.execCommand("goCharLeft");\n
          } else if (type == "addFour") {\n
            cm.replaceSelection(left + left + left + left, "before");\n
            cm.execCommand("goCharRight");\n
          }\n
        });\n
      };\n
      if (left != right) map["\'" + right + "\'"] = function(cm) {\n
        var ranges = cm.listSelections();\n
        for (var i = 0; i < ranges.length; i++) {\n
          var range = ranges[i];\n
          if (!range.empty() ||\n
              cm.getRange(range.head, Pos(range.head.line, range.head.ch + 1)) != right)\n
            return CodeMirror.Pass;\n
        }\n
        cm.execCommand("goCharRight");\n
      };\n
    })(pairs.charAt(i), pairs.charAt(i + 1));\n
    return map;\n
  }\n
\n
  function buildExplodeHandler(pairs) {\n
    return function(cm) {\n
      if (cm.getOption("disableInput")) return CodeMirror.Pass;\n
      var ranges = cm.listSelections();\n
      for (var i = 0; i < ranges.length; i++) {\n
        if (!ranges[i].empty()) return CodeMirror.Pass;\n
        var around = charsAround(cm, ranges[i].head);\n
        if (!around || pairs.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n
      }\n
      cm.operation(function() {\n
        cm.replaceSelection("\\n\\n", null);\n
        cm.execCommand("goCharLeft");\n
        ranges = cm.listSelections();\n
        for (var i = 0; i < ranges.length; i++) {\n
          var line = ranges[i].head.line;\n
          cm.indentLine(line, null, true);\n
          cm.indentLine(line + 1, null, true);\n
        }\n
      });\n
    };\n
  }\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>6302</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
