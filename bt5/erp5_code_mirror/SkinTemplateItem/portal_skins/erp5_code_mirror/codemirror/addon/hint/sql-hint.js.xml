<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts21897119.32</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>sql-hint.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"), require("../../mode/sql/sql"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror", "../../mode/sql/sql"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  "use strict";\n
\n
  var tables;\n
  var defaultTable;\n
  var keywords;\n
  var CONS = {\n
    QUERY_DIV: ";",\n
    ALIAS_KEYWORD: "AS"\n
  };\n
  var Pos = CodeMirror.Pos;\n
\n
  function getKeywords(editor) {\n
    var mode = editor.doc.modeOption;\n
    if (mode === "sql") mode = "text/x-sql";\n
    return CodeMirror.resolveMode(mode).keywords;\n
  }\n
\n
  function match(string, word) {\n
    var len = string.length;\n
    var sub = word.substr(0, len);\n
    return string.toUpperCase() === sub.toUpperCase();\n
  }\n
\n
  function addMatches(result, search, wordlist, formatter) {\n
    for (var word in wordlist) {\n
      if (!wordlist.hasOwnProperty(word)) continue;\n
      if (Array.isArray(wordlist)) {\n
        word = wordlist[word];\n
      }\n
      if (match(search, word)) {\n
        result.push(formatter(word));\n
      }\n
    }\n
  }\n
\n
  function nameCompletion(cur, token, result, editor) {\n
    var useBacktick = (token.string.charAt(0) == "`");\n
    var string = token.string.substr(1);\n
    var prevToken = editor.getTokenAt(Pos(cur.line, token.start));\n
    if (token.string.charAt(0) == "." || prevToken.string == "."){\n
      //Suggest colunm names\n
      if (prevToken.string == ".") {\n
        var prevToken = editor.getTokenAt(Pos(cur.line, token.start - 1));\n
      }\n
      var table = prevToken.string;\n
      //Check if backtick is used in table name. If yes, use it for columns too.\n
      var useBacktickTable = false;\n
      if (table.match(/`/g)) {\n
        useBacktickTable = true;\n
        table = table.replace(/`/g, "");\n
      }\n
      //Check if table is available. If not, find table by Alias\n
      if (!tables.hasOwnProperty(table))\n
        table = findTableByAlias(table, editor);\n
      var columns = tables[table];\n
      if (!columns) return;\n
\n
      if (useBacktick) {\n
        addMatches(result, string, columns, function(w) {return "`" + w + "`";});\n
      }\n
      else if(useBacktickTable) {\n
        addMatches(result, string, columns, function(w) {return ".`" + w + "`";});\n
      }\n
      else {\n
        addMatches(result, string, columns, function(w) {return "." + w;});\n
      }\n
    }\n
    else {\n
      //Suggest table names or colums in defaultTable\n
      while (token.start && string.charAt(0) == ".") {\n
        token = editor.getTokenAt(Pos(cur.line, token.start - 1));\n
        string = token.string + string;\n
      }\n
      if (useBacktick) {\n
        addMatches(result, string, tables, function(w) {return "`" + w + "`";});\n
        addMatches(result, string, defaultTable, function(w) {return "`" + w + "`";});\n
      }\n
      else {\n
        addMatches(result, string, tables, function(w) {return w;});\n
        addMatches(result, string, defaultTable, function(w) {return w;});\n
      }\n
    }\n
  }\n
\n
  function eachWord(lineText, f) {\n
    if (!lineText) return;\n
    var excepted = /[,;]/g;\n
    var words = lineText.split(" ");\n
    for (var i = 0; i < words.length; i++) {\n
      f(words[i]?words[i].replace(excepted, \'\') : \'\');\n
    }\n
  }\n
\n
  function convertCurToNumber(cur) {\n
    // max characters of a line is 999,999.\n
    return cur.line + cur.ch / Math.pow(10, 6);\n
  }\n
\n
  function convertNumberToCur(num) {\n
    return Pos(Math.floor(num), +num.toString().split(\'.\').pop());\n
  }\n
\n
  function findTableByAlias(alias, editor) {\n
    var doc = editor.doc;\n
    var fullQuery = doc.getValue();\n
    var aliasUpperCase = alias.toUpperCase();\n
    var previousWord = "";\n
    var table = "";\n
    var separator = [];\n
    var validRange = {\n
      start: Pos(0, 0),\n
      end: Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).length)\n
    };\n
\n
    //add separator\n
    var indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV);\n
    while(indexOfSeparator != -1) {\n
      separator.push(doc.posFromIndex(indexOfSeparator));\n
      indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV, indexOfSeparator+1);\n
    }\n
    separator.unshift(Pos(0, 0));\n
    separator.push(Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).text.length));\n
\n
    //find valid range\n
    var prevItem = 0;\n
    var current = convertCurToNumber(editor.getCursor());\n
    for (var i=0; i< separator.length; i++) {\n
      var _v = convertCurToNumber(separator[i]);\n
      if (current > prevItem && current <= _v) {\n
        validRange = { start: convertNumberToCur(prevItem), end: convertNumberToCur(_v) };\n
        break;\n
      }\n
      prevItem = _v;\n
    }\n
\n
    var query = doc.getRange(validRange.start, validRange.end, false);\n
\n
    for (var i = 0; i < query.length; i++) {\n
      var lineText = query[i];\n
      eachWord(lineText, function(word) {\n
        var wordUpperCase = word.toUpperCase();\n
        if (wordUpperCase === aliasUpperCase && tables.hasOwnProperty(previousWord)) {\n
            table = previousWord;\n
        }\n
        if (wordUpperCase !== CONS.ALIAS_KEYWORD) {\n
          previousWord = word;\n
        }\n
      });\n
      if (table) break;\n
    }\n
    return table;\n
  }\n
\n
  CodeMirror.registerHelper("hint", "sql", function(editor, options) {\n
    tables = (options && options.tables) || {};\n
    var defaultTableName = options && options.defaultTable;\n
    defaultTable = (defaultTableName && tables[defaultTableName] || []);\n
    keywords = keywords || getKeywords(editor);\n
\n
    var cur = editor.getCursor();\n
    var result = [];\n
    var token = editor.getTokenAt(cur), start, end, search;\n
    if (token.end > cur.ch) {\n
      token.end = cur.ch;\n
      token.string = token.string.slice(0, cur.ch - token.start);\n
    }\n
\n
    if (token.string.match(/^[.`\\w@]\\w*$/)) {\n
      search = token.string;\n
      start = token.start;\n
      end = token.end;\n
    } else {\n
      start = end = cur.ch;\n
      search = "";\n
    }\n
    if (search.charAt(0) == "." || search.charAt(0) == "`") {\n
      nameCompletion(cur, token, result, editor);\n
    } else {\n
      addMatches(result, search, tables, function(w) {return w;});\n
      addMatches(result, search, defaultTable, function(w) {return w;});\n
      addMatches(result, search, keywords, function(w) {return w.toUpperCase();});\n
    }\n
\n
    return {list: result, from: Pos(cur.line, start), to: Pos(cur.line, end)};\n
  });\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>6499</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
