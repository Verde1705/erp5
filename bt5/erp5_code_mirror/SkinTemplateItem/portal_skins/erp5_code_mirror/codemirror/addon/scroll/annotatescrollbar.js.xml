<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts21897118.59</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>annotatescrollbar.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  "use strict";\n
\n
  CodeMirror.defineExtension("annotateScrollbar", function(className) {\n
    return new Annotation(this, className);\n
  });\n
\n
  function Annotation(cm, className) {\n
    this.cm = cm;\n
    this.className = className;\n
    this.annotations = [];\n
    this.div = cm.getWrapperElement().appendChild(document.createElement("div"));\n
    this.div.style.cssText = "position: absolute; right: 0; top: 0; z-index: 7; pointer-events: none";\n
    this.computeScale();\n
\n
    var self = this;\n
    cm.on("refresh", this.resizeHandler = function(){\n
      if (self.computeScale()) self.redraw();\n
    });\n
  }\n
\n
  Annotation.prototype.computeScale = function() {\n
    var cm = this.cm;\n
    var hScale = (cm.getWrapperElement().clientHeight - cm.display.barHeight) /\n
      cm.heightAtLine(cm.lastLine() + 1, "local");\n
    if (hScale != this.hScale) {\n
      this.hScale = hScale;\n
      return true;\n
    }\n
  };\n
\n
  Annotation.prototype.update = function(annotations) {\n
    this.annotations = annotations;\n
    this.redraw();\n
  };\n
\n
  Annotation.prototype.redraw = function() {\n
    var cm = this.cm, hScale = this.hScale;\n
    if (!cm.display.barWidth) return;\n
\n
    var frag = document.createDocumentFragment(), anns = this.annotations;\n
    for (var i = 0, nextTop; i < anns.length; i++) {\n
      var ann = anns[i];\n
      var top = nextTop || cm.charCoords(ann.from, "local").top * hScale;\n
      var bottom = cm.charCoords(ann.to, "local").bottom * hScale;\n
      while (i < anns.length - 1) {\n
        nextTop = cm.charCoords(anns[i + 1].from, "local").top * hScale;\n
        if (nextTop > bottom + .9) break;\n
        ann = anns[++i];\n
        bottom = cm.charCoords(ann.to, "local").bottom * hScale;\n
      }\n
      var height = Math.max(bottom - top, 3);\n
\n
      var elt = frag.appendChild(document.createElement("div"));\n
      elt.style.cssText = "position: absolute; right: 0px; width: " + Math.max(cm.display.barWidth - 1, 2) + "px; top: " + top + "px; height: " + height + "px";\n
      elt.className = this.className;\n
    }\n
    this.div.textContent = "";\n
    this.div.appendChild(frag);\n
  };\n
\n
  Annotation.prototype.clear = function() {\n
    this.cm.off("refresh", this.resizeHandler);\n
    this.div.parentNode.removeChild(this.div);\n
  };\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2660</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
